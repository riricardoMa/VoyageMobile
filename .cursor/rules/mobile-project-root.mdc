---
description: 
globs: 
alwaysApply: true
---
# VoyageMobile - React Native + Expo Mobile Application

## Project Overview
VoyageMobile is a React Native + Expo mobile application built with TypeScript, following SOLID principles and using bun as the JavaScript runtime. The project emphasizes type safety, clean architecture, and modern mobile development practices.

## Core Technologies & Dependencies
- **Runtime**: Bun (JavaScript runtime)
- **Framework**: React Native with Expo SDK ~53.0.11
- **Language**: TypeScript with strict configuration
- **UI Framework**: NativeWind (Tailwind CSS for React Native)
- **Navigation**: React Navigation v7 (Stack, Bottom Tabs, Native Stack)
- **State Management**: Custom state management with React hooks and AsyncStorage for persistence
- **Backend**: Supabase integration
- **Storage**: AsyncStorage for persistent storage

## SOLID Principles Implementation

### Single Responsibility Principle (SRP)
- Each component, service, and utility has one clear responsibility
- Screens handle only UI logic and delegate business logic to services
- Services handle only business logic and data operations
- State management handles application-wide state concerns
- Utils handle only pure functions and helpers

### Open/Closed Principle (OCP)
- Components are open for extension through props and composition
- Services use interface-based design for extensibility
- State stores follow consistent interfaces for extensibility
- New features extend existing functionality without modification

### Liskov Substitution Principle (LSP)
- All service implementations must be interchangeable
- State stores follow consistent base interfaces
- Components accept interface types, not concrete implementations
- Consistent return types and behavior across similar functions

### Interface Segregation Principle (ISP)
- Services expose only necessary methods to consumers
- State stores expose only relevant state and actions
- Components receive only the props they need
- Type definitions are specific and minimal

### Dependency Inversion Principle (DIP)
- High-level components depend on abstractions (services, state)
- Business logic is abstracted from UI components
- State management abstracts storage implementations
- External dependencies are injected, not directly imported

## Project Structure
```
├── [index.ts](mdc:index.ts)                    # App entry point
├── [app.json](mdc:app.json)                    # Expo configuration
├── [package.json](mdc:package.json)            # Dependencies and scripts
├── [tsconfig.json](mdc:tsconfig.json)          # TypeScript configuration
├── [bunfig.toml](mdc:bunfig.toml)             # Bun configuration
├── [tailwind.config.js](mdc:tailwind.config.js) # Tailwind configuration
├── [global.css](mdc:global.css)               # Global styles
├── app/
│   ├── [App.tsx](mdc:app/App.tsx)             # Main app component
│   ├── screens/                               # Screen components (UI only)
│   ├── services/                              # Business logic & API calls
│   ├── state/                                 # Application state management
│   └── utils/                                 # Pure utility functions
├── ios/                                       # iOS platform files
└── .expo/                                     # Expo build artifacts
```

## Development Standards

### TypeScript Configuration
- Strict mode enabled for maximum type safety
- Path aliases configured for clean imports:
  - `@app/*` → `app/*`
  - `@services/*` → `app/services/*`
  - `@state/*` → `app/state/*`
  - `@utils/*` → `app/utils/*`
  - `@screens/*` → `app/screens/*`
- ESNext target with modern module resolution

### Component Guidelines
```typescript
// Good: Single responsibility, typed props
interface UserProfileProps {
  userId: string;
  onUpdate: (user: User) => void;
}

export const UserProfile: React.FC<UserProfileProps> = ({ userId, onUpdate }) => {
  // UI logic only, delegate business logic to services
  // Use state hooks for application state
};
```

### Service Layer Architecture
```typescript
// Good: Interface-based service design
interface UserService {
  getUser(id: string): Promise<User>;
  updateUser(user: Partial<User>): Promise<User>;
}

export class SupabaseUserService implements UserService {
  // Implementation details
}
```

### State Management Architecture
```typescript
// Good: Interface-based state design following SOLID principles
export interface IBaseStore<T> {
  state: T;
  actions: Record<string, (...args: unknown[]) => void>;
}

// Store creation follows consistent patterns
export type StoreCreator<T> = (
  set: (partial: Partial<T> | ((state: T) => Partial<T>)) => void,
  get: () => T
) => T & Record<string, unknown>;
```

### Styling with NativeWind
- Use Tailwind utility classes for consistent styling
- Responsive design principles for different screen sizes
- Platform-specific styles when necessary

## Bun Runtime Standards

### Package Management
```bash
# Use bun for all package operations
bun install                    # Install dependencies
bun add <package>             # Add dependencies
bun remove <package>          # Remove dependencies
```

### Script Execution
```bash
# Development commands
bun run start                 # Start Expo development server
bun run dev                   # Start with cache cleared
bun run android              # Run on Android
bun run ios                  # Run on iOS
bun run web                  # Run on web
```

### Performance Benefits
- Faster installation and startup times
- Better TypeScript integration
- Native ESM support

## Code Quality Standards

### Naming Conventions
- **Components**: PascalCase (`UserProfile.tsx`)
- **Services**: PascalCase with Service suffix (`UserService.ts`)
- **State Stores**: camelCase with Store suffix (`userStore.ts`)
- **State Hooks**: camelCase with 'use' prefix (`useUserState.ts`)
- **Utils**: camelCase (`formatDate.ts`)
- **Constants**: SCREAMING_SNAKE_CASE (`API_ENDPOINTS`)
- **Interfaces**: PascalCase with descriptive names (`UserData`, `ApiResponse`)

### File Organization
```
app/
├── screens/
│   ├── auth/
│   │   ├── LoginScreen.tsx
│   │   └── RegisterScreen.tsx
│   └── profile/
│       └── ProfileScreen.tsx
├── services/
│   ├── auth/
│   │   └── AuthService.ts
│   ├── i18n/
│   │   └── I18nService.ts
│   └── upload/
│       └── UploadService.ts
├── state/
│   ├── stores/
│   │   ├── userStore.ts
│   │   └── appSettingsStore.ts
│   ├── hooks/
│   │   ├── useUserState.ts
│   │   └── useAppState.ts
│   ├── types/
│   │   └── StoreTypes.ts
│   └── index.ts
└── utils/
    ├── validation/
    │   └── validators.ts
    └── formatting/
        └── dateUtils.ts
```

### Error Handling
- Use try-catch blocks for async operations
- Implement proper error boundaries
- Provide meaningful error messages
- Log errors appropriately for debugging

### Performance Guidelines
- Use React.memo() for expensive components
- Implement proper list optimization with FlatList
- Lazy load screens and heavy components
- Optimize images and assets
- Use efficient state management patterns

## State Management Guidelines

### Store Design Principles
- Follow the Interface Segregation Principle - expose only necessary state
- Implement consistent interfaces using `IBaseStore<T>`
- Use TypeScript for all state definitions
- Implement proper error handling in state actions
- Use AsyncStorage for persistent state when appropriate

### State Organization
- **stores/**: Individual state stores (user, app settings, navigation)
- **hooks/**: Custom hooks for consuming state
- **types/**: TypeScript definitions for state structures
- **providers/**: Context providers when needed

### State Usage Patterns
```typescript
// Import state using path aliases
import { useUserStore } from '@state/stores/userStore';
import type { IBaseStore } from '@state/types/StoreTypes';

// Components consume state through custom hooks
const MyComponent = () => {
  const { user, updateUser } = useUserStore();
  // Component logic
};
```

## Testing Standards
- Unit tests for services and utilities
- Component testing with React Native Testing Library
- State store testing with proper mocking
- Integration tests for critical user flows
- E2E testing with Detox (when applicable)

## Security Considerations
- Secure storage for sensitive data using Expo SecureStore
- Proper authentication flow implementation
- API key and secret management
- Input validation and sanitization
- Secure state management for sensitive user data

## Expo Integration
- Follow Expo managed workflow best practices
- Use Expo SDK modules when available
- Proper configuration in [app.json](mdc:app.json)
- Platform-specific builds when necessary

Remember: Always follow SOLID principles, maintain type safety, leverage bun's performance benefits, and use the proper architectural layers (UI → State/Services → Utils) throughout development.
